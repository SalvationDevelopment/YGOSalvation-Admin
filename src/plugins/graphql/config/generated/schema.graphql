type Background {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  image: UploadFile
}

type BackgroundAggregator {
  count: Int
  totalCount: Int
}

type BackgroundConnection {
  values: [Background]
  groupBy: BackgroundGroupBy
  aggregate: BackgroundAggregator
}

type BackgroundConnection_id {
  key: ID
  connection: BackgroundConnection
}

type BackgroundConnectionCreatedAt {
  key: DateTime
  connection: BackgroundConnection
}

type BackgroundConnectionId {
  key: ID
  connection: BackgroundConnection
}

type BackgroundConnectionImage {
  key: ID
  connection: BackgroundConnection
}

type BackgroundConnectionName {
  key: String
  connection: BackgroundConnection
}

type BackgroundConnectionUpdatedAt {
  key: DateTime
  connection: BackgroundConnection
}

type BackgroundGroupBy {
  _id: [BackgroundConnection_id]
  id: [BackgroundConnectionId]
  createdAt: [BackgroundConnectionCreatedAt]
  updatedAt: [BackgroundConnectionUpdatedAt]
  name: [BackgroundConnectionName]
  image: [BackgroundConnectionImage]
}

input BackgroundInput {
  name: String!
  image: ID
}

type Comment {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String
  user: UsersPermissionsUser
  thread: Thread
  forum: Forum
}

type CommentAggregator {
  count: Int
  totalCount: Int
}

type CommentConnection {
  values: [Comment]
  groupBy: CommentGroupBy
  aggregate: CommentAggregator
}

type CommentConnection_id {
  key: ID
  connection: CommentConnection
}

type CommentConnectionContent {
  key: String
  connection: CommentConnection
}

type CommentConnectionCreatedAt {
  key: DateTime
  connection: CommentConnection
}

type CommentConnectionForum {
  key: ID
  connection: CommentConnection
}

type CommentConnectionId {
  key: ID
  connection: CommentConnection
}

type CommentConnectionThread {
  key: ID
  connection: CommentConnection
}

type CommentConnectionUpdatedAt {
  key: DateTime
  connection: CommentConnection
}

type CommentConnectionUser {
  key: ID
  connection: CommentConnection
}

type CommentGroupBy {
  _id: [CommentConnection_id]
  id: [CommentConnectionId]
  createdAt: [CommentConnectionCreatedAt]
  updatedAt: [CommentConnectionUpdatedAt]
  content: [CommentConnectionContent]
  user: [CommentConnectionUser]
  thread: [CommentConnectionThread]
  forum: [CommentConnectionForum]
}

input CommentInput {
  content: String
  user: ID
  thread: ID
  forum: ID
}

type Cover {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  image: UploadFile
}

type CoverAggregator {
  count: Int
  totalCount: Int
}

type CoverConnection {
  values: [Cover]
  groupBy: CoverGroupBy
  aggregate: CoverAggregator
}

type CoverConnection_id {
  key: ID
  connection: CoverConnection
}

type CoverConnectionCreatedAt {
  key: DateTime
  connection: CoverConnection
}

type CoverConnectionId {
  key: ID
  connection: CoverConnection
}

type CoverConnectionImage {
  key: ID
  connection: CoverConnection
}

type CoverConnectionName {
  key: String
  connection: CoverConnection
}

type CoverConnectionUpdatedAt {
  key: DateTime
  connection: CoverConnection
}

type CoverGroupBy {
  _id: [CoverConnection_id]
  id: [CoverConnectionId]
  createdAt: [CoverConnectionCreatedAt]
  updatedAt: [CoverConnectionUpdatedAt]
  name: [CoverConnectionName]
  image: [CoverConnectionImage]
}

input CoverInput {
  name: String
  image: ID
}

input createBackgroundInput {
  data: BackgroundInput
}

type createBackgroundPayload {
  background: Background
}

input createCommentInput {
  data: CommentInput
}

type createCommentPayload {
  comment: Comment
}

input createCoverInput {
  data: CoverInput
}

type createCoverPayload {
  cover: Cover
}

input createDeckInput {
  data: DeckInput
}

type createDeckPayload {
  deck: Deck
}

input createForumInput {
  data: ForumInput
}

type createForumPayload {
  forum: Forum
}

input createReplayInput {
  data: ReplayInput
}

type createReplayPayload {
  replay: Replay
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSectionInput {
  data: SectionInput
}

type createSectionPayload {
  section: Section
}

input createThreadInput {
  data: ThreadInput
}

type createThreadPayload {
  thread: Thread
}

input createTournamentInput {
  data: TournamentInput
}

type createTournamentPayload {
  tournament: Tournament
}

input createUpdatesInput {
  data: UpdatesInput
}

type createUpdatesPayload {
  update: Updates
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

type Deck {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: UsersPermissionsUser
  main: JSON
  extra: JSON
  side: JSON
  name: String
  owner: String
}

type DeckAggregator {
  count: Int
  totalCount: Int
}

type DeckConnection {
  values: [Deck]
  groupBy: DeckGroupBy
  aggregate: DeckAggregator
}

type DeckConnection_id {
  key: ID
  connection: DeckConnection
}

type DeckConnectionCreatedAt {
  key: DateTime
  connection: DeckConnection
}

type DeckConnectionExtra {
  key: JSON
  connection: DeckConnection
}

type DeckConnectionId {
  key: ID
  connection: DeckConnection
}

type DeckConnectionMain {
  key: JSON
  connection: DeckConnection
}

type DeckConnectionName {
  key: String
  connection: DeckConnection
}

type DeckConnectionOwner {
  key: String
  connection: DeckConnection
}

type DeckConnectionSide {
  key: JSON
  connection: DeckConnection
}

type DeckConnectionUpdatedAt {
  key: DateTime
  connection: DeckConnection
}

type DeckConnectionUser {
  key: ID
  connection: DeckConnection
}

type DeckGroupBy {
  _id: [DeckConnection_id]
  id: [DeckConnectionId]
  createdAt: [DeckConnectionCreatedAt]
  updatedAt: [DeckConnectionUpdatedAt]
  user: [DeckConnectionUser]
  main: [DeckConnectionMain]
  extra: [DeckConnectionExtra]
  side: [DeckConnectionSide]
  name: [DeckConnectionName]
  owner: [DeckConnectionOwner]
}

input DeckInput {
  user: ID
  main: JSON
  extra: JSON
  side: JSON
  name: String
  owner: String
}

input deleteBackgroundInput {
  where: InputID
}

type deleteBackgroundPayload {
  background: Background
}

input deleteCommentInput {
  where: InputID
}

type deleteCommentPayload {
  comment: Comment
}

input deleteCoverInput {
  where: InputID
}

type deleteCoverPayload {
  cover: Cover
}

input deleteDeckInput {
  where: InputID
}

type deleteDeckPayload {
  deck: Deck
}

input deleteForumInput {
  where: InputID
}

type deleteForumPayload {
  forum: Forum
}

input deleteReplayInput {
  where: InputID
}

type deleteReplayPayload {
  replay: Replay
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSectionInput {
  where: InputID
}

type deleteSectionPayload {
  section: Section
}

input deleteThreadInput {
  where: InputID
}

type deleteThreadPayload {
  thread: Thread
}

input deleteTournamentInput {
  where: InputID
}

type deleteTournamentPayload {
  tournament: Tournament
}

input deleteUpdatesInput {
  where: InputID
}

type deleteUpdatesPayload {
  update: Updates
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editBackgroundInput {
  name: String
  image: ID
}

input editCommentInput {
  content: String
  user: ID
  thread: ID
  forum: ID
}

input editCoverInput {
  name: String
  image: ID
}

input editDeckInput {
  user: ID
  main: JSON
  extra: JSON
  side: JSON
  name: String
  owner: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editForumInput {
  title: String
  description: String
  comments: [ID]
  threads: [ID]
  link: String
}

input editReplayInput {
  history: JSON
  creator: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSectionInput {
  title: String
  link: String
  index: Int
}

input editThreadInput {
  thread: String
  creator: ID
  forum: ID
}

input editTournamentInput {
  creator: ID
  contestants: [ID]
  started: Boolean
}

input editUpdatesInput {
  title: String
  body: String
  creator: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  tournament: ID
  elo: Int
  service: Boolean
  points: Int
  avatar: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Forum {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  link: String
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  threads(sort: String, limit: Int, start: Int, where: JSON): [Thread]
}

type ForumAggregator {
  count: Int
  totalCount: Int
}

type ForumConnection {
  values: [Forum]
  groupBy: ForumGroupBy
  aggregate: ForumAggregator
}

type ForumConnection_id {
  key: ID
  connection: ForumConnection
}

type ForumConnectionCreatedAt {
  key: DateTime
  connection: ForumConnection
}

type ForumConnectionDescription {
  key: String
  connection: ForumConnection
}

type ForumConnectionId {
  key: ID
  connection: ForumConnection
}

type ForumConnectionLink {
  key: String
  connection: ForumConnection
}

type ForumConnectionTitle {
  key: String
  connection: ForumConnection
}

type ForumConnectionUpdatedAt {
  key: DateTime
  connection: ForumConnection
}

type ForumGroupBy {
  _id: [ForumConnection_id]
  id: [ForumConnectionId]
  createdAt: [ForumConnectionCreatedAt]
  updatedAt: [ForumConnectionUpdatedAt]
  title: [ForumConnectionTitle]
  description: [ForumConnectionDescription]
  link: [ForumConnectionLink]
}

input ForumInput {
  title: String
  description: String
  comments: [ID]
  threads: [ID]
  link: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Background | createBackgroundPayload | updateBackgroundPayload | deleteBackgroundPayload | BackgroundConnection | BackgroundAggregator | BackgroundGroupBy | BackgroundConnection_id | BackgroundConnectionId | BackgroundConnectionCreatedAt | BackgroundConnectionUpdatedAt | BackgroundConnectionName | BackgroundConnectionImage | Comment | createCommentPayload | updateCommentPayload | deleteCommentPayload | CommentConnection | CommentAggregator | CommentGroupBy | CommentConnection_id | CommentConnectionId | CommentConnectionCreatedAt | CommentConnectionUpdatedAt | CommentConnectionContent | CommentConnectionUser | CommentConnectionThread | CommentConnectionForum | Cover | createCoverPayload | updateCoverPayload | deleteCoverPayload | CoverConnection | CoverAggregator | CoverGroupBy | CoverConnection_id | CoverConnectionId | CoverConnectionCreatedAt | CoverConnectionUpdatedAt | CoverConnectionName | CoverConnectionImage | Deck | createDeckPayload | updateDeckPayload | deleteDeckPayload | DeckConnection | DeckAggregator | DeckGroupBy | DeckConnection_id | DeckConnectionId | DeckConnectionCreatedAt | DeckConnectionUpdatedAt | DeckConnectionUser | DeckConnectionMain | DeckConnectionExtra | DeckConnectionSide | DeckConnectionName | DeckConnectionOwner | Forum | createForumPayload | updateForumPayload | deleteForumPayload | ForumConnection | ForumAggregator | ForumGroupBy | ForumConnection_id | ForumConnectionId | ForumConnectionCreatedAt | ForumConnectionUpdatedAt | ForumConnectionTitle | ForumConnectionDescription | ForumConnectionLink | Replay | createReplayPayload | updateReplayPayload | deleteReplayPayload | ReplayConnection | ReplayAggregator | ReplayGroupBy | ReplayConnection_id | ReplayConnectionId | ReplayConnectionCreatedAt | ReplayConnectionUpdatedAt | ReplayConnectionHistory | ReplayConnectionCreator | Section | createSectionPayload | updateSectionPayload | deleteSectionPayload | SectionConnection | SectionAggregator | SectionAggregatorSum | SectionAggregatorAvg | SectionAggregatorMin | SectionAggregatorMax | SectionGroupBy | SectionConnection_id | SectionConnectionId | SectionConnectionCreatedAt | SectionConnectionUpdatedAt | SectionConnectionTitle | SectionConnectionLink | SectionConnectionIndex | Thread | createThreadPayload | updateThreadPayload | deleteThreadPayload | ThreadConnection | ThreadAggregator | ThreadGroupBy | ThreadConnection_id | ThreadConnectionId | ThreadConnectionCreatedAt | ThreadConnectionUpdatedAt | ThreadConnectionThread | ThreadConnectionCreator | ThreadConnectionForum | Tournament | createTournamentPayload | updateTournamentPayload | deleteTournamentPayload | TournamentConnection | TournamentAggregator | TournamentGroupBy | TournamentConnection_id | TournamentConnectionId | TournamentConnectionCreatedAt | TournamentConnectionUpdatedAt | TournamentConnectionCreator | TournamentConnectionStarted | Updates | createUpdatesPayload | updateUpdatesPayload | deleteUpdatesPayload | UpdatesConnection | UpdatesAggregator | UpdatesGroupBy | UpdatesConnection_id | UpdatesConnectionId | UpdatesConnectionCreatedAt | UpdatesConnectionUpdatedAt | UpdatesConnectionTitle | UpdatesConnectionBody | UpdatesConnectionCreator | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserAggregatorSum | UsersPermissionsUserAggregatorAvg | UsersPermissionsUserAggregatorMin | UsersPermissionsUserAggregatorMax | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionTournament | UsersPermissionsUserConnectionElo | UsersPermissionsUserConnectionService | UsersPermissionsUserConnectionPoints | UsersPermissionsUserConnectionAvatar

type Mutation {
  createBackground(input: createBackgroundInput): createBackgroundPayload
  updateBackground(input: updateBackgroundInput): updateBackgroundPayload
  deleteBackground(input: deleteBackgroundInput): deleteBackgroundPayload
  createComment(input: createCommentInput): createCommentPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  createCover(input: createCoverInput): createCoverPayload
  updateCover(input: updateCoverInput): updateCoverPayload
  deleteCover(input: deleteCoverInput): deleteCoverPayload
  createDeck(input: createDeckInput): createDeckPayload
  updateDeck(input: updateDeckInput): updateDeckPayload
  deleteDeck(input: deleteDeckInput): deleteDeckPayload
  createForum(input: createForumInput): createForumPayload
  updateForum(input: updateForumInput): updateForumPayload
  deleteForum(input: deleteForumInput): deleteForumPayload
  createReplay(input: createReplayInput): createReplayPayload
  updateReplay(input: updateReplayInput): updateReplayPayload
  deleteReplay(input: deleteReplayInput): deleteReplayPayload
  createSection(input: createSectionInput): createSectionPayload
  updateSection(input: updateSectionInput): updateSectionPayload
  deleteSection(input: deleteSectionInput): deleteSectionPayload
  createThread(input: createThreadInput): createThreadPayload
  updateThread(input: updateThreadInput): updateThreadPayload
  deleteThread(input: deleteThreadInput): deleteThreadPayload
  createTournament(input: createTournamentInput): createTournamentPayload
  updateTournament(input: updateTournamentInput): updateTournamentPayload
  deleteTournament(input: deleteTournamentInput): deleteTournamentPayload
  createUpdates(input: createUpdatesInput): createUpdatesPayload
  updateUpdates(input: updateUpdatesInput): updateUpdatesPayload
  deleteUpdates(input: deleteUpdatesInput): deleteUpdatesPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  background(id: ID!): Background
  backgrounds(sort: String, limit: Int, start: Int, where: JSON): [Background]
  backgroundsConnection(sort: String, limit: Int, start: Int, where: JSON): BackgroundConnection
  comment(id: ID!): Comment
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  commentsConnection(sort: String, limit: Int, start: Int, where: JSON): CommentConnection
  cover(id: ID!): Cover
  covers(sort: String, limit: Int, start: Int, where: JSON): [Cover]
  coversConnection(sort: String, limit: Int, start: Int, where: JSON): CoverConnection
  deck(id: ID!): Deck
  decks(sort: String, limit: Int, start: Int, where: JSON): [Deck]
  decksConnection(sort: String, limit: Int, start: Int, where: JSON): DeckConnection
  forum(id: ID!): Forum
  forums(sort: String, limit: Int, start: Int, where: JSON): [Forum]
  forumsConnection(sort: String, limit: Int, start: Int, where: JSON): ForumConnection
  replay(id: ID!): Replay
  replays(sort: String, limit: Int, start: Int, where: JSON): [Replay]
  replaysConnection(sort: String, limit: Int, start: Int, where: JSON): ReplayConnection
  section(id: ID!): Section
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
  sectionsConnection(sort: String, limit: Int, start: Int, where: JSON): SectionConnection
  thread(id: ID!): Thread
  threads(sort: String, limit: Int, start: Int, where: JSON): [Thread]
  threadsConnection(sort: String, limit: Int, start: Int, where: JSON): ThreadConnection
  tournament(id: ID!): Tournament
  tournaments(sort: String, limit: Int, start: Int, where: JSON): [Tournament]
  tournamentsConnection(sort: String, limit: Int, start: Int, where: JSON): TournamentConnection
  update(id: ID!): Updates
  updates(sort: String, limit: Int, start: Int, where: JSON): [Updates]
  updatesConnection(sort: String, limit: Int, start: Int, where: JSON): UpdatesConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

"""Recorded Duels"""
type Replay {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  history: JSON
  creator: UsersPermissionsUser
}

type ReplayAggregator {
  count: Int
  totalCount: Int
}

type ReplayConnection {
  values: [Replay]
  groupBy: ReplayGroupBy
  aggregate: ReplayAggregator
}

type ReplayConnection_id {
  key: ID
  connection: ReplayConnection
}

type ReplayConnectionCreatedAt {
  key: DateTime
  connection: ReplayConnection
}

type ReplayConnectionCreator {
  key: ID
  connection: ReplayConnection
}

type ReplayConnectionHistory {
  key: JSON
  connection: ReplayConnection
}

type ReplayConnectionId {
  key: ID
  connection: ReplayConnection
}

type ReplayConnectionUpdatedAt {
  key: DateTime
  connection: ReplayConnection
}

type ReplayGroupBy {
  _id: [ReplayConnection_id]
  id: [ReplayConnectionId]
  createdAt: [ReplayConnectionCreatedAt]
  updatedAt: [ReplayConnectionUpdatedAt]
  history: [ReplayConnectionHistory]
  creator: [ReplayConnectionCreator]
}

input ReplayInput {
  history: JSON
  creator: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Cluster of related Forums"""
type Section {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  link: String
  index: Int
}

type SectionAggregator {
  count: Int
  totalCount: Int
  sum: SectionAggregatorSum
  avg: SectionAggregatorAvg
  min: SectionAggregatorMin
  max: SectionAggregatorMax
}

type SectionAggregatorAvg {
  index: Float
}

type SectionAggregatorMax {
  index: Float
}

type SectionAggregatorMin {
  index: Float
}

type SectionAggregatorSum {
  index: Float
}

type SectionConnection {
  values: [Section]
  groupBy: SectionGroupBy
  aggregate: SectionAggregator
}

type SectionConnection_id {
  key: ID
  connection: SectionConnection
}

type SectionConnectionCreatedAt {
  key: DateTime
  connection: SectionConnection
}

type SectionConnectionId {
  key: ID
  connection: SectionConnection
}

type SectionConnectionIndex {
  key: Int
  connection: SectionConnection
}

type SectionConnectionLink {
  key: String
  connection: SectionConnection
}

type SectionConnectionTitle {
  key: String
  connection: SectionConnection
}

type SectionConnectionUpdatedAt {
  key: DateTime
  connection: SectionConnection
}

type SectionGroupBy {
  _id: [SectionConnection_id]
  id: [SectionConnectionId]
  createdAt: [SectionConnectionCreatedAt]
  updatedAt: [SectionConnectionUpdatedAt]
  title: [SectionConnectionTitle]
  link: [SectionConnectionLink]
  index: [SectionConnectionIndex]
}

input SectionInput {
  title: String
  link: String
  index: Int
}

type Thread {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  thread: String
  creator: UsersPermissionsUser
  forum: Forum
}

type ThreadAggregator {
  count: Int
  totalCount: Int
}

type ThreadConnection {
  values: [Thread]
  groupBy: ThreadGroupBy
  aggregate: ThreadAggregator
}

type ThreadConnection_id {
  key: ID
  connection: ThreadConnection
}

type ThreadConnectionCreatedAt {
  key: DateTime
  connection: ThreadConnection
}

type ThreadConnectionCreator {
  key: ID
  connection: ThreadConnection
}

type ThreadConnectionForum {
  key: ID
  connection: ThreadConnection
}

type ThreadConnectionId {
  key: ID
  connection: ThreadConnection
}

type ThreadConnectionThread {
  key: String
  connection: ThreadConnection
}

type ThreadConnectionUpdatedAt {
  key: DateTime
  connection: ThreadConnection
}

type ThreadGroupBy {
  _id: [ThreadConnection_id]
  id: [ThreadConnectionId]
  createdAt: [ThreadConnectionCreatedAt]
  updatedAt: [ThreadConnectionUpdatedAt]
  thread: [ThreadConnectionThread]
  creator: [ThreadConnectionCreator]
  forum: [ThreadConnectionForum]
}

input ThreadInput {
  thread: String
  creator: ID
  forum: ID
}

type Tournament {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: UsersPermissionsUser
  started: Boolean
  contestants(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type TournamentAggregator {
  count: Int
  totalCount: Int
}

type TournamentConnection {
  values: [Tournament]
  groupBy: TournamentGroupBy
  aggregate: TournamentAggregator
}

type TournamentConnection_id {
  key: ID
  connection: TournamentConnection
}

type TournamentConnectionCreatedAt {
  key: DateTime
  connection: TournamentConnection
}

type TournamentConnectionCreator {
  key: ID
  connection: TournamentConnection
}

type TournamentConnectionId {
  key: ID
  connection: TournamentConnection
}

type TournamentConnectionStarted {
  key: Boolean
  connection: TournamentConnection
}

type TournamentConnectionUpdatedAt {
  key: DateTime
  connection: TournamentConnection
}

type TournamentGroupBy {
  _id: [TournamentConnection_id]
  id: [TournamentConnectionId]
  createdAt: [TournamentConnectionCreatedAt]
  updatedAt: [TournamentConnectionUpdatedAt]
  creator: [TournamentConnectionCreator]
  started: [TournamentConnectionStarted]
}

input TournamentInput {
  creator: ID
  contestants: [ID]
  started: Boolean
}

input updateBackgroundInput {
  where: InputID
  data: editBackgroundInput
}

type updateBackgroundPayload {
  background: Background
}

input updateCommentInput {
  where: InputID
  data: editCommentInput
}

type updateCommentPayload {
  comment: Comment
}

input updateCoverInput {
  where: InputID
  data: editCoverInput
}

type updateCoverPayload {
  cover: Cover
}

input updateDeckInput {
  where: InputID
  data: editDeckInput
}

type updateDeckPayload {
  deck: Deck
}

input updateForumInput {
  where: InputID
  data: editForumInput
}

type updateForumPayload {
  forum: Forum
}

input updateReplayInput {
  where: InputID
  data: editReplayInput
}

type updateReplayPayload {
  replay: Replay
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

"""News Updates"""
type Updates {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  body: String
  creator: UsersPermissionsUser
}

type UpdatesAggregator {
  count: Int
  totalCount: Int
}

type UpdatesConnection {
  values: [Updates]
  groupBy: UpdatesGroupBy
  aggregate: UpdatesAggregator
}

type UpdatesConnection_id {
  key: ID
  connection: UpdatesConnection
}

type UpdatesConnectionBody {
  key: String
  connection: UpdatesConnection
}

type UpdatesConnectionCreatedAt {
  key: DateTime
  connection: UpdatesConnection
}

type UpdatesConnectionCreator {
  key: ID
  connection: UpdatesConnection
}

type UpdatesConnectionId {
  key: ID
  connection: UpdatesConnection
}

type UpdatesConnectionTitle {
  key: String
  connection: UpdatesConnection
}

type UpdatesConnectionUpdatedAt {
  key: DateTime
  connection: UpdatesConnection
}

input updateSectionInput {
  where: InputID
  data: editSectionInput
}

type updateSectionPayload {
  section: Section
}

type UpdatesGroupBy {
  _id: [UpdatesConnection_id]
  id: [UpdatesConnectionId]
  createdAt: [UpdatesConnectionCreatedAt]
  updatedAt: [UpdatesConnectionUpdatedAt]
  title: [UpdatesConnectionTitle]
  body: [UpdatesConnectionBody]
  creator: [UpdatesConnectionCreator]
}

input UpdatesInput {
  title: String
  body: String
  creator: ID
}

input updateThreadInput {
  where: InputID
  data: editThreadInput
}

type updateThreadPayload {
  thread: Thread
}

input updateTournamentInput {
  where: InputID
  data: editTournamentInput
}

type updateTournamentPayload {
  tournament: Tournament
}

input updateUpdatesInput {
  where: InputID
  data: editUpdatesInput
}

type updateUpdatesPayload {
  update: Updates
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  tournament: ID
  elo: Int
  service: Boolean
  points: Int
  avatar: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  tournament: Tournament
  elo: Int
  service: Boolean
  points: Int
  avatar: UploadFile
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
  sum: UsersPermissionsUserAggregatorSum
  avg: UsersPermissionsUserAggregatorAvg
  min: UsersPermissionsUserAggregatorMin
  max: UsersPermissionsUserAggregatorMax
}

type UsersPermissionsUserAggregatorAvg {
  elo: Float
  points: Float
}

type UsersPermissionsUserAggregatorMax {
  elo: Float
  points: Float
}

type UsersPermissionsUserAggregatorMin {
  elo: Float
  points: Float
}

type UsersPermissionsUserAggregatorSum {
  elo: Float
  points: Float
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAvatar {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionElo {
  key: Int
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionPoints {
  key: Int
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionService {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionTournament {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  tournament: [UsersPermissionsUserConnectionTournament]
  elo: [UsersPermissionsUserConnectionElo]
  service: [UsersPermissionsUserConnectionService]
  points: [UsersPermissionsUserConnectionPoints]
  avatar: [UsersPermissionsUserConnectionAvatar]
}
